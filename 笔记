Random 
    	定义：

	使用步骤：
		1.导包
			inport java.until.Random;
		2.创建对象
			Random r = new Rangdom();
		3.获取随机数	
			int num = r.nextint(变化范围);
contiue:
	跳过循环体中的剩余语句，进入下一次循环
嵌套循环：
	1.嵌套中的循环，一般多行多列的时候，外层控制行，内层控制列
	2.执行规则：外层循环走一次，内层的走所有次
	3.建议：循环层次越少越好，能一层解决最好
		如果你写的程序必须使用三层以上循环才能解决，那么你的程序设计很可能有问题
break：只能跳出一层循环

数组：
	定义：数组是存储同一种数据类型多个元素的容器。数组既可以存储基本数据类型，也可以存储引用数据类型。
	格式： 
		1：数据类型[] 数组名
		2：数据类型 数组名[]     
数组的初始化：
	1.   int[] a =new int[长度];
	2.   int a[] = new int[长度];
	静态初始化：int[] a = new int[]{1,2,3,15,56,};    定义了每个数组的值，由系统来确定数组的长度。
		   也可以写成 int [] a ={1,2,3,45,9};
	动态初始化：在定义数组的时候，只定义了数组的长度，通过系统来定义数组的值。
 数组的遍历：
                 int[] a = new  int[5];	
	 for (int i = 0; i < args.length; i++) 
	 {
		System.out.println(a[i]);
	 }
栈：
	存储的是局部变量；使用完毕后会立即释放
堆：
	存储的是new出来的；每一个对象都是有地址值的；每一个对象都是有默认值的。
    	使用完毕后由垃圾回收器在空闲的时候回收
	char类型的默认值是'/u0000'
	boolean的默认值是： false
	引用数据类型的默认值是：null
数组的复制：
	* 第一种方法
 	* Arrays.copyOf(被复制的数组名字, 要复制的长度);
 	* 这个方法只有jdk1.6版本以上才能使用
 	* javaApI底层是用c++来写的，所以速度非常快。
 	* 第二种方法
	  System.arraycopy(src,srcPos,dest,destPos,length)
		 *  src:源数组；
		 *  srcPos:源数组的开始的复制的位置
		 *  dest:目标数组
		 *  destPos:目标数组的开始复制的位置
		 *  length：复制的长度
冒泡排序：
	冒泡排序算法的原理如下：
	比较相邻的元素。如果第一个比第二个大，就交换他们两个。
	对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。
	针对所有的元素重复以上的步骤，除了最后一个。
	持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较
方法：（函数，过程）
		 * 1）概念
		 * 		封装了一段特定的业务逻辑的功能。
		 *      方法尽可能是独立的，让一个方法去干一件事情。
		 *      方法也是可以被反复的重复地去调用。
		 *      较少代码的重复。
		 *		有利于代码的后期维护，同时能够减少团队开发的成本，提高开发的效率。
		 * 2）语法结构
		 * 		修饰词 返回值类型  方法名 （参数列表）{
		 * 	 		方法体；//具体的业务逻辑功能
		 * 			return 返回值；
		 *      }
		 *      
		 *      修饰词：public static
		 *      返回值类型：用于限定返回值的具体的类型
		 *      方法名：为了我们调用的时候方便，而起的名字
		 *      参数列表：（数据类型  参数名 ，参数类型  参数名2......）
		 *      参数类型：用于限定传入的数据类型
		 *      参数名：    用于接收调用方法传入的数据的变量
		 * 3） 方法的使用
		 * 		1）方法是否有返回值；
		 * 		2）方法是否有参数列表  
		 *    
		 */4.方法的调用
			1.单独调用      不推荐使用
			2.输出调用，    有意义的 
			3.赋值调用（找一个东西接收返回值后，再进行使用）      推荐使用
